import java.util.*;

interface TaxiHelper
{
    double minimumFare = 100;
    double kmsThreshold = 5;
    double costPerKm = 10;
   
    double calculateFare(double kms);
    void bookSlot(Slot bookedSlot);
    boolean isAvailable(int ts);
   
}

class Slot
{
    public int startTime;
    public int endTime;
   
    public Slot(int start, int end)
    {
        this.startTime = start;
        this.endTime = end;
    }
   
    public boolean isBetweenSlot(int timeStamp)
    {
       return (timeStamp>= startTime && timeStamp <endTime);
    }
}

class Taxi implements TaxiHelper
{
    int taxiID;
    Point currentLocation;
    double earnings = 0;
    ArrayList<Slot> bookedSlots = new ArrayList<Slot>();
   
    public Taxi(int taxiID, Point currentLocation )
    {
        this.taxiID = taxiID;
        this.currentLocation = currentLocation;
    }
   
    public int getTaxiID()
    {
        return this.taxiID;
    }
   
    public double calculateFare(double kms)
    {
        double fare = 0;
        if(kms >= kmsThreshold)
        {
            fare = minimumFare;
            kms -= kmsThreshold;
        }
       
        fare += kms*costPerKm;
       
        return ( fare > minimumFare ) ? fare : minimumFare ;
    }
   
    public Point getCurrentLocation()
    {
        return this.currentLocation;
    }
   
    public void setCurrentLocation(Point point)
    {
        this.currentLocation = point;
    }
   
    public void bookSlot(Slot slot)
    {
        bookedSlots.add(slot);
    }
   
    public boolean isAvailable(int ts)
    {
        for(Slot taxiSlot :  bookedSlots)
        {
            if(taxiSlot.isBetweenSlot(ts))
            {
                return false;
            }
        }
       
        return true;
    }
   
    public void updateEarnings(double latestEarnings)
    {
        this.earnings+= latestEarnings;
    }
   
    public double getTotalEarnings()
    {
        return this.earnings;
    }
}

class Booking
{
    int customerID ;
    int bookingID ;
    public Point pickUpPoint;
    public Point dropPoint;
    Taxi taxi;
    public int pickUpTime;
    public int dropTime;
    double fare;
    double distanceTocalculateFare;
   
    public Booking(int bookingID,int customerID,Point pickUpPoint, Point dropPoint, int pickUpTime)
    {
        this.bookingID = bookingID;
        this.customerID = customerID;
        this.pickUpPoint = pickUpPoint;
        this.dropPoint = dropPoint;
        this.pickUpTime = pickUpTime;
        this.distanceTocalculateFare = Map.calculateDistance(pickUpPoint, dropPoint);
        double timeToTravel = distanceTocalculateFare*4/60;
        this.dropTime = pickUpTime+ (int)timeToTravel;
       
        this.taxi = Matcher.matchTaxi(this);
        if(this.taxi == null)
        {
            return;
        }
        taxi.bookSlot(new Slot(pickUpTime, dropTime));
        taxi.setCurrentLocation(dropPoint);
        fare = taxi.calculateFare(this.distanceTocalculateFare);
        taxi.updateEarnings(fare);
       
        System.out.println("Booking Success with fare = "+this.fare+" cab - "+taxi.getTaxiID());
    }
   
    public HashMap<String, Object> bookingDetail()
    {
        HashMap<String, Object> detail = new HashMap();
        detail.put("booking_id",this.bookingID);
        detail.put("customer_id",this.customerID);
        detail.put("pickup_loc",this.pickUpPoint.getID());
        detail.put("drop_loc",this.pickUpPoint.getID());
        detail.put("pickup_time",this.pickUpTime);
        detail.put("drop_time",this.dropTime);
        detail.put("fare",this.fare);
        detail.put("taxi",this.taxi.getTaxiID());
       
        return detail;
    }
   
    public boolean isTaxiAssociated()
    {
        return this.taxi!=null;
    }
}

class DataBase
{
    static ArrayList<Taxi> taxiDB = null ;
    static ArrayList<Booking> bookingDB = null;
   
    public static void init()
    {
        taxiDB = new ArrayList<Taxi>();
        bookingDB = new ArrayList<Booking>();
    }
   
    public static void insertTaxi(Taxi taxi)
    {
        if(taxiDB == null || bookingDB == null)
        {
            System.out.println("DB Initilization error");
            return;
        }
        taxiDB.add(taxi);
    }
   
    public static void insertBooking(Booking booking)
    {
        if(taxiDB == null || bookingDB == null)
        {
            System.out.println("DB Initilization error");
            return;
        }
        bookingDB.add(booking);
    }
   
    public static ArrayList<Taxi> getAvailableTaxi(int pickUpTime, Point pickupPoint)
    {
        ArrayList<Taxi> availableTaxi = new ArrayList<Taxi>();
        for(Taxi taxi: taxiDB)
        {
            if(taxi.isAvailable(pickUpTime))
            {
                availableTaxi.add(taxi);
            }
        }
        return availableTaxi;
    }
   
    public static ArrayList<Taxi> getTaxiList()
    {
        return taxiDB;
    }
   
    public static ArrayList<Booking> getBookingList()
    {
        return bookingDB;
    }
   
    public static int getBookingID()
    {
        return bookingDB.size()+1;
    }
}

class Point
{
    char id;
    public double distanceToPreviousPoint = 0;
    public double distanceToNextPoint = 0;
    public Point prev = null;
    public Point next = null;
   
    public Point(char id)
    {
        this.id = id;
    }
   
    public void setPrevious(Point prev, double distance)
    {
        this.prev = prev;
        this.distanceToPreviousPoint = distance;
    }
   
    public void setNext(Point next)
    {
        this.next = next;
        this.distanceToNextPoint = next.distanceToPreviousPoint;
    }
    public char getID()
    {
        return this.id;
    }
}

class Map
{
    public static Point head = null;
    static Point current = null;
   
    public static void addPoint(char id, double distanceFromPrevious)
    {
        Point tempPoint = new Point(id);
        if(head == null){
            head =tempPoint;
            current = head;
            return;
        }
        tempPoint.setPrevious(current, distanceFromPrevious);
        current.setNext(tempPoint);
        current = tempPoint;
    }
   
    public static Point getPoint(char id)
    {
        Point temp = head;
        while(temp.next != null)
        {
            if(temp.getID() == id)
            {
                return temp;
            }
            temp = temp.next;
        }
        if(temp.getID() == id)
        {
            return temp;
        }
        System.out.println("Invalid destination ID");
        return null;
    }
   
    public static double calculateDistance(Point p1,Point p2)
    {
        Point temp = head;
        Point start = null;
        Point end = null;
        while(temp.next!=null)
        {
            if(temp.getID() == p1.getID())
            {
                start = p1;
                end =p2;
               
                break;
            }
           
            if(temp.getID() == p2.getID())
            {
                start = p2;
                end = p1;
               
                break;
            }
           
            temp = temp.next;
        }
       
        double distance = 0;
       
        if(start == null || end == null || (start == end))
        {
            return distance;
        }
       
         while(start.next != end)
         {
            distance += start.distanceToNextPoint;
            start = start.next;
         }
         distance+=end.distanceToPreviousPoint;
         return distance;
    }
}

class PreProcess
{
    public static void init()
    {
        DataBase.init();
        initMap();
        initTaxi();
    }
   
    private static void initMap()
    {
        Map.addPoint('A',0);
        Map.addPoint('B',15);
        Map.addPoint('C',15);
        Map.addPoint('D',15);
        Map.addPoint('E',15);
        Map.addPoint('F',15);
    }
   
    private static void initTaxi()
    {
        if(Map.head == null)
        {
            System.out.println("Map Initilization Error.");
            return;
        }
        DataBase.insertTaxi(new Taxi(1,Map.head));
        DataBase.insertTaxi(new Taxi(2,Map.head));
        DataBase.insertTaxi(new Taxi(3,Map.head));
        DataBase.insertTaxi(new Taxi(4,Map.head));
    }
}

class BookingGenaerator
{
    public static void book(int customerID, char start, char end, int pickUpTime)
    {
        Booking booking = new Booking(DataBase.getBookingID(), customerID,Map.getPoint(start),Map.getPoint(end),pickUpTime);
       
        if(booking.isTaxiAssociated())
        {
            DataBase.insertBooking(booking);
        }
        else
        {
            System.out.println("Booking Rejected");    
        }
    }
}

class Matcher
{
    public static Taxi matchTaxi(Booking booking)
    {
        ArrayList<Taxi> availableTaxi= DataBase.getAvailableTaxi(booking.pickUpTime, booking.pickUpPoint);
       
        if(availableTaxi.size() == 0)
        {
            return null;
        }
       
        Comparator taxiComp = new TaxiComparator(booking.pickUpPoint);
        Collections.sort(availableTaxi, taxiComp);
        return availableTaxi.get(0);
    }
}

class TaxiComparator implements Comparator<Taxi>
{
    Point pickUpPoint;
   
    public TaxiComparator(Point pickUpPoint)
    {
        this.pickUpPoint = pickUpPoint;
    }
   
    public int compare(Taxi taxi1, Taxi taxi2)
    {
        double distance1 = Map.calculateDistance(pickUpPoint, taxi1.getCurrentLocation());
        double distance2 = Map.calculateDistance(pickUpPoint, taxi2.getCurrentLocation());
       
        if(distance2 > distance1)
        {
            return -1;
        }
        else if(distance1 > distance2)
        {
            return 1;
        }
        else
        {
            double earnings1 = taxi1.getTotalEarnings();
            double earnings2 = taxi2.getTotalEarnings();
           
            if(earnings1 > earnings2)
            {
                return 1;
            }
            else if(earnings2 > earnings1)
            {
                return -1;
            }
            else{
                return 0;
            }
        }
    }
}


class Invoice
{
    public static void generate()
    {
        ArrayList<Taxi> taxiList = DataBase.getTaxiList();
        ArrayList<Booking> bookingList = DataBase.getBookingList();
        for(Taxi taxi : taxiList)
        {
            System.out.printf("%10s\tTotal Earnings:%10d\n","Taxi-"+taxi.getTaxiID(),(int)taxi.getTotalEarnings());
            for(Booking booking: bookingList)
            {
                HashMap<String,Object> detail = booking.bookingDetail();
                if((int)detail.get("taxi") == taxi.getTaxiID())
                {
                    System.out.printf("%6d%6d%6c%6c%7d%7d%10d\n",detail.get("booking_id"),detail.get("customer_id"),detail.get("pickup_loc"), detail.get("drop_loc"), detail.get("pickup_time"), detail.get("drop_time"),(int) ((double)detail.get("fare")));
                }
            }
        }
    }
}

public class Main
{
public static void main(String[] args) {
   PreProcess.init();
   BookingGenaerator.book(1,'A','B',9);
   BookingGenaerator.book(2,'B','D',9);
   BookingGenaerator.book(3,'B','C',12);
   
   Invoice.generate();
}
}
